import requests
#web scraping library
from bs4 import BeautifulSoup 
import pandas as pd
import matplotlib.pyplot as plt
#old dataset(2021)
df=pd.read_csv("netflix_titles.csv") 
#print first 5 rows
df.head() 
#check for null values
df.isnull().sum 
#Information about datatypes used
df.info()  
#Convert date to datetime format for trend analysis
df["date_added"]= pd.to_datetime(df["date_added"])
#Yearly Releases
df['release_year'].value_counts().sort_index().plot(kind="line", figsize=(10, 5))
plt.xlabel("Year")
plt.ylabel("Number of Releases")
plt.title("Number of Netflix Releases per Year")
plt.show()
#Movies vs TV Shows
df['type'].value_counts().plot(kind='bar',color=['red','blue'])
plt.xlabel('Content Type')
plt.ylabel('Count')
plt.title('Movies vs TV Shows on Netflix')
plt.show()
# Top 10 Most Common Genres on Netflix
all_genres=",".join(df["listed_in"].dropna()).split(", ")
genre_counts=Counter(all_genres)
genre_df= pd.DataFrame(genre_counts.items(),columns=["Genre", "Count"]).sort_values(by="Count",ascending=False)
sns.barplot(x="Count",y="Genre",data=genre_df.head(10))
plt.title("Top 10 Most Common genres on Netflix")
plt.show()
#Predictions using Random Forest
df["genre_encoded"]=df["listed_in"].factorize()[0]
X=df[['release_year', 'duration']]
Y=df["genre_encoded"]
X_train,X_test,Y_train,Y_test=train_test_split(X,Y, test_size=0.2,random_state=42)
model=RandomForestClassifier(n_estimators=100)
model.fit(X_train,Y_train)
Y_pred=model.predict(X_test)
#Error
ValueError                                Traceback (most recent call last)
Cell In[19], line 6
      4 X_train,X_test,y_train,y_test=train_test_split(X,y, test_size=0.2,random_state=42)
      5 model=RandomForestClassifier(n_estimators=100)
----> 6 model.fit(X_train,y_train)
      7 y_pred=model.predict(X_test)

File C:\ProgramData\anaconda3\lib\site-packages\sklearn\ensemble\_forest.py:345, in BaseForest.fit(self, X, y, sample_weight)
    343 if issparse(y):
    344     raise ValueError("sparse multilabel-indicator for y is not supported.")
--> 345 X, y = self._validate_data(
    346     X, y, multi_output=True, accept_sparse="csc", dtype=DTYPE
    347 )
    348 if sample_weight is not None:
    349     sample_weight = _check_sample_weight(sample_weight, X)

File C:\ProgramData\anaconda3\lib\site-packages\sklearn\base.py:565, in BaseEstimator._validate_data(self, X, y, reset, validate_separately, **check_params)
    563         y = check_array(y, input_name="y", **check_y_params)
    564     else:
--> 565         X, y = check_X_y(X, y, **check_params)
    566     out = X, y
    568 if not no_val_X and check_params.get("ensure_2d", True):

File C:\ProgramData\anaconda3\lib\site-packages\sklearn\utils\validation.py:1106, in check_X_y(X, y, accept_sparse, accept_large_sparse, dtype, order, copy, force_all_finite, ensure_2d, allow_nd, multi_output, ensure_min_samples, ensure_min_features, y_numeric, estimator)
   1101         estimator_name = _check_estimator_name(estimator)
   1102     raise ValueError(
   1103         f"{estimator_name} requires y to be passed, but the target y is None"
   1104     )
-> 1106 X = check_array(
   1107     X,
   1108     accept_sparse=accept_sparse,
   1109     accept_large_sparse=accept_large_sparse,
   1110     dtype=dtype,
   1111     order=order,
   1112     copy=copy,
   1113     force_all_finite=force_all_finite,
   1114     ensure_2d=ensure_2d,
   1115     allow_nd=allow_nd,
   1116     ensure_min_samples=ensure_min_samples,
   1117     ensure_min_features=ensure_min_features,
   1118     estimator=estimator,
   1119     input_name="X",
   1120 )
   1122 y = _check_y(y, multi_output=multi_output, y_numeric=y_numeric, estimator=estimator)
   1124 check_consistent_length(X, y)

File C:\ProgramData\anaconda3\lib\site-packages\sklearn\utils\validation.py:879, in check_array(array, accept_sparse, accept_large_sparse, dtype, order, copy, force_all_finite, ensure_2d, allow_nd, ensure_min_samples, ensure_min_features, estimator, input_name)
    877         array = xp.astype(array, dtype, copy=False)
    878     else:
--> 879         array = _asarray_with_order(array, order=order, dtype=dtype, xp=xp)
    880 except ComplexWarning as complex_warning:
    881     raise ValueError(
    882         "Complex data not supported\n{}\n".format(array)
    883     ) from complex_warning

File C:\ProgramData\anaconda3\lib\site-packages\sklearn\utils\_array_api.py:185, in _asarray_with_order(array, dtype, order, copy, xp)
    182     xp, _ = get_namespace(array)
    183 if xp.__name__ in {"numpy", "numpy.array_api"}:
    184     # Use NumPy API to support order
--> 185     array = numpy.asarray(array, order=order, dtype=dtype)
    186     return xp.asarray(array, copy=copy)
    187 else:

File C:\ProgramData\anaconda3\lib\site-packages\pandas\core\generic.py:2070, in NDFrame.__array__(self, dtype)
   2069 def __array__(self, dtype: npt.DTypeLike | None = None) -> np.ndarray:
-> 2070     return np.asarray(self._values, dtype=dtype)

ValueError: could not convert string to float: '79 min'

